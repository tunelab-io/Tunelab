<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Join Rythmit - GitHub for Musicians</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        :root {
            --color-bg-primary: #0d1117;
            --color-bg-secondary: #161b22;
            --color-text-primary: #c9d1d9;
            --color-text-secondary: #8b949e;
            --color-accent-primary: #58a6ff;
            --color-accent-secondary: #1f6feb;
            --color-border: #30363d;
            --color-success: #238636;
            --color-success-hover: #2ea043;
            --color-error: #f85149;
            --color-error-bg: rgba(248, 81, 73, 0.1);
            --color-error-border: rgba(248, 81, 73, 0.2);
            --color-input-bg: #0d1117;
            --color-social-btn: #21262d;
            --color-social-btn-hover: #30363d;
            --transition-speed: 0.2s;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
        }

        body {
            background-color: var(--color-bg-primary);
            color: var(--color-text-primary);
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            line-height: 1.5;
            background-image: radial-gradient(circle at 25% 25%, rgba(88, 166, 255, 0.05) 0%, transparent 40%), 
                              radial-gradient(circle at 75% 75%, rgba(88, 166, 255, 0.05) 0%, transparent 40%);
        }

        .register-container {
            background-color: var(--color-bg-secondary);
            border: 1px solid var(--color-border);
            border-radius: 8px;
            padding: 32px 40px;
            width: 400px;
            box-shadow: 0 4px 24px rgba(0, 0, 0, 0.2);
            animation: fadeIn 0.5s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .logo-container {
            display: flex;
            justify-content: center;
            margin-bottom: 24px;
        }

        .logo {
            width: 56px;
            height: 56px;
            filter: drop-shadow(0 0 8px rgba(88, 166, 255, 0.3));
            transition: transform var(--transition-speed);
        }

        .logo:hover {
            transform: scale(1.05);
        }

        h1 {
            margin-bottom: 24px;
            font-size: 24px;
            font-weight: 600;
            text-align: center;
            letter-spacing: -0.5px;
            color: #e6edf3;
        }

        .form-group {
            margin-bottom: 20px;
            position: relative;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-size: 14px;
            font-weight: 500;
            color: var(--color-text-secondary);
        }

        input {
            width: 100%;
            padding: 10px 12px;
            font-size: 14px;
            border: 1px solid var(--color-border);
            border-radius: 6px;
            background-color: var(--color-input-bg);
            color: var(--color-text-primary);
            box-sizing: border-box;
            transition: all var(--transition-speed) ease;
        }

        input:focus {
            border-color: var(--color-accent-primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(88, 166, 255, 0.2);
        }

        button {
            width: 100%;
            padding: 12px 16px;
            font-size: 14px;
            font-weight: 600;
            color: #ffffff;
            background-color: var(--color-success);
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: all var(--transition-speed) ease;
            position: relative;
            overflow: hidden;
        }

        button:hover {
            background-color: var(--color-success-hover);
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }

        button:active {
            background-color: var(--color-success);
            transform: translateY(1px);
            box-shadow: none;
        }

        button::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 5px;
            height: 5px;
            background: rgba(255, 255, 255, 0.5);
            opacity: 0;
            border-radius: 100%;
            transform: scale(1, 1) translate(-50%);
            transform-origin: 50% 50%;
        }

        button:focus:not(:active)::after {
            animation: ripple 1s ease-out;
        }

        @keyframes ripple {
            0% {
                transform: scale(0, 0);
                opacity: 0.5;
            }
            100% {
                transform: scale(100, 100);
                opacity: 0;
            }
        }

        a {
            color: var(--color-accent-primary);
            text-decoration: none;
            transition: color var(--transition-speed) ease;
            font-weight: 500;
        }

        a:hover {
            color: #79b8ff;
            text-decoration: underline;
        }

        p {
            text-align: center;
            margin-top: 24px;
            font-size: 14px;
            color: var(--color-text-secondary);
        }

        .input-hint {
            margin-top: 6px;
            font-size: 12px;
            color: var(--color-text-secondary);
            transition: color var(--transition-speed) ease;
        }

        input:focus + .input-hint,
        input:hover + .input-hint {
            color: #a0aec0;
        }

        .error-message {
            background-color: var(--color-error-bg);
            border: 1px solid var(--color-error-border);
            color: var(--color-error);
            border-radius: 6px;
            padding: 12px 16px;
            margin-bottom: 20px;
            font-size: 14px;
            display: none;
            animation: shake 0.5s cubic-bezier(.36,.07,.19,.97) both;
        }

        @keyframes shake {
            10%, 90% { transform: translate3d(-1px, 0, 0); }
            20%, 80% { transform: translate3d(2px, 0, 0); }
            30%, 50%, 70% { transform: translate3d(-3px, 0, 0); }
            40%, 60% { transform: translate3d(3px, 0, 0); }
        }

        .error-message.visible {
            display: flex;
            align-items: center;
        }

        .error-message::before {
            content: "⚠️";
            margin-right: 8px;
        }

        .divider {
            display: flex;
            align-items: center;
            margin: 24px 0;
            color: var(--color-text-secondary);
            font-size: 12px;
        }

        .divider::before,
        .divider::after {
            content: "";
            flex: 1;
            border-top: 1px solid var(--color-border);
        }

        .divider span {
            padding: 0 12px;
        }

        .social-login {
            display: flex;
            gap: 12px;
            margin-bottom: 8px;
        }

        .social-btn {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 10px 12px;
            background-color: var(--color-social-btn);
            border: 1px solid var(--color-border);
            border-radius: 6px;
            cursor: pointer;
            transition: all var(--transition-speed) ease;
            color: var(--color-text-primary);
            font-size: 14px;
            font-weight: 500;
        }

        .social-btn:hover {
            background-color: var(--color-social-btn-hover);
            transform: translateY(-1px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        .social-btn:active {
            transform: translateY(1px);
            box-shadow: none;
        }

        .social-icon {
            width: 18px;
            height: 18px;
        }

        .password-toggle {
            position: absolute;
            right: 12px;
            top: 38px;
            color: var(--color-text-secondary);
            cursor: pointer;
            font-size: 14px;
        }

        .password-toggle:hover {
            color: var(--color-text-primary);
        }

        .password-strength {
            height: 4px;
            margin-top: 8px;
            border-radius: 2px;
            background-color: var(--color-border);
            overflow: hidden;
        }

        .password-strength-meter {
            height: 100%;
            width: 0;
            transition: width 0.3s ease, background-color 0.3s ease;
        }
        .strength-weak { width: 25%; background-color: #f85149; }
        .strength-fair { width: 50%; background-color: #f0883e; }
        .strength-good { width: 75%; background-color: #3fb950; }
        .strength-strong { width: 100%; background-color: #238636; }

        .terms {
            font-size: 12px;
            color: var(--color-text-secondary);
            text-align: center;
            margin-top: 16px;
        }

        .verification-container {
            display: none;
            margin-top: 20px;
        }

        .verification-container.visible {
            display: block;
        }

        .verification-code {
            display: flex;
            justify-content: center;
            gap: 8px;
            margin: 16px 0;
        }

        .verification-code input {
            width: 40px;
            height: 40px;
            text-align: center;
            font-size: 20px;
            border: 1px solid var(--color-border);
            border-radius: 4px;
            background: var(--color-background-secondary);
            color: var(--color-text-primary);
        }

        .verification-code input:focus {
            border-color: var(--color-accent-primary);
            outline: none;
        }

        .resend-code {
            text-align: center;
            margin-top: 12px;
        }

        .resend-code button {
            background: none;
            border: none;
            color: var(--color-accent-primary);
            cursor: pointer;
            font-size: 14px;
        }

        .resend-code button:disabled {
            color: var(--color-text-secondary);
            cursor: not-allowed;
        }

        @media (max-width: 480px) {
            .register-container {
                width: 90%;
                padding: 24px;
            }

            .verification-code input {
                width: 35px;
                height: 35px;
                font-size: 18px;
            }
        }
    </style>
</head>
<body>
    <div class="register-container">
        <div class="logo-container">
            <svg class="logo" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM7.5 16.5V7.5L16.5 12L7.5 16.5Z" fill="#58a6ff"/>
            </svg>
        </div>
        <h1>Join Rythmit</h1>
        
        <div id="error-message" class="error-message">
            There was a problem with your submission. Please check the form and try again.
        </div>
        
        <div class="social-login">
            <button class="social-btn" type="button">
                <svg class="social-icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12.24 10.285V14.4h6.806c-.275 1.765-2.056 5.174-6.806 5.174-4.095 0-7.439-3.389-7.439-7.574s3.345-7.574 7.439-7.574c2.33 0 3.891.989 4.785 1.849l3.254-3.138C18.189 1.186 15.479 0 12.24 0c-6.635 0-12 5.365-12 12s5.365 12 12 12c6.926 0 11.52-4.869 11.52-11.726 0-.788-.085-1.39-.189-1.989H12.24z" fill="#c9d1d9"/>
                </svg>
                Continue with Google
            </button>
        </div>
        <div class="social-login">
            <button class="social-btn" type="button">
                <svg class="social-icon" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" fill="#c9d1d9"/>
                </svg>
                Continue with GitHub
            </button>
        </div>
        
        <div class="divider"><span>OR</span></div>
        
        <form action="/register" method="POST" id="register-form">
            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" name="username" required autocomplete="username" placeholder="e.g., music_producer">
                <div class="input-hint">Only letters, numbers & hyphens</div>
            </div>
            <div class="form-group">
                <label for="email">Email address</label>
                <input type="email" id="email" name="email" required autocomplete="email" placeholder="you@example.com">
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required autocomplete="new-password" placeholder="Create a strong password">
                <span class="password-toggle" id="password-toggle"><i class="far fa-eye"></i></span>
                <div class="password-strength">
                    <div class="password-strength-meter" id="password-strength-meter"></div>
                </div>
                <div class="input-hint">Make it strong and at least 8 characters</div>
            </div>
            <div class="form-group">
                <label for="confirm-password">Confirm password</label>
                <input type="password" id="confirm-password" name="confirmPassword" required autocomplete="new-password" placeholder="Confirm your password">
                <span class="password-toggle" id="confirm-password-toggle"><i class="far fa-eye"></i></span>
            </div>
            <button type="submit" id="submit-button">Send verification code</button>

            <div id="verification-container" class="verification-container">
                <h3>Enter verification code</h3>
                <p>We've sent a verification code to your email address.</p>
                <div class="verification-code">
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
                    <input type="text" maxlength="1" pattern="[0-9]" inputmode="numeric">
                </div>
                <div class="resend-code">
                    <button type="button" id="resend-button" disabled>
                        Resend code in <span id="countdown">60</span>s
                    </button>
                </div>
            </div>
        </form>
        <p>Already have an account? <a href="/login">Sign in →</a></p>
        <div class="terms">
            By creating an account, you agree to our <a href="/terms">Terms of Service</a> and <a href="/privacy">Privacy Policy</a>.
        </div>
    </div>
    
    <script>
        // Form validation and 2FA process
        document.getElementById('register-form').addEventListener('submit', async function(event) {
            event.preventDefault();
            
            const username = document.getElementById('username').value.trim();
            const email = document.getElementById('email').value.trim();
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirm-password').value;
            const errorMessage = document.getElementById('error-message');
            const verificationContainer = document.getElementById('verification-container');
            
            // Reset error message
            errorMessage.classList.remove('visible');
            
            // Validate username
            if (!/^[a-zA-Z0-9-_]+$/.test(username)) {
                errorMessage.textContent = 'Username can only contain letters, numbers, hyphens, and underscores.';
                errorMessage.classList.add('visible');
                document.getElementById('username').focus();
                return;
            }
            
            // Validate email
            if (!/\S+@\S+\.\S+/.test(email)) {
                errorMessage.textContent = 'Please enter a valid email address.';
                errorMessage.classList.add('visible');
                document.getElementById('email').focus();
                return;
            }
            
            // Validate password
            if (password.length < 8) {
                errorMessage.textContent = 'Password must be at least 8 characters long.';
                errorMessage.classList.add('visible');
                document.getElementById('password').focus();
                return;
            }
            
            // Validate password confirmation
            if (password !== confirmPassword) {
                errorMessage.textContent = 'Passwords do not match.';
                errorMessage.classList.add('visible');
                document.getElementById('confirm-password').focus();
                return;
            }

            try {
                // Send initial registration data and get verification code
                const response = await fetch('/register/initiate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        username,
                        email,
                        password
                    })
                });

                const data = await response.json();

                if (data.success) {
                    // Show verification container
                    verificationContainer.classList.add('visible');
                    document.getElementById('submit-button').style.display = 'none';
                    startCountdown();
                } else {
                    errorMessage.textContent = data.error || 'An error occurred. Please try again.';
                    errorMessage.classList.add('visible');
                }
            } catch (err) {
                errorMessage.textContent = 'Server error. Please try again later.';
                errorMessage.classList.add('visible');
            }
        });

        // Verification code input handling
        const verificationInputs = document.querySelectorAll('.verification-code input');
        verificationInputs.forEach((input, index) => {
            input.addEventListener('input', async function(e) {
                if (e.inputType === "deleteContentBackward" && index > 0) {
                    verificationInputs[index - 1].focus();
                    return;
                }
                
                if (this.value.length === 1) {
                    if (index < verificationInputs.length - 1) {
                        verificationInputs[index + 1].focus();
                    }
                    
                    // Check if all inputs are filled
                    const code = Array.from(verificationInputs).map(input => input.value).join('');
                    if (code.length === 6) {
                        try {
                            const response = await fetch('/register/verify', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ code })
                            });

                            const data = await response.json();
                            if (data.success) {
                                window.location.href = '/dashboard';
                            } else {
                                const errorMessage = document.getElementById('error-message');
                                errorMessage.textContent = data.error || 'Invalid verification code';
                                errorMessage.classList.add('visible');
                            }
                        } catch (err) {
                            const errorMessage = document.getElementById('error-message');
                            errorMessage.textContent = 'Server error. Please try again later.';
                            errorMessage.classList.add('visible');
                        }
                    }
                }
            });

            input.addEventListener('keydown', function(e) {
                if (e.key === "Backspace" && !this.value && index > 0) {
                    verificationInputs[index - 1].focus();
                }
            });
        });

        // Countdown timer for resend code
        function startCountdown() {
            const countdownElement = document.getElementById('countdown');
            const resendButton = document.getElementById('resend-button');
            let timeLeft = 60;

            const timer = setInterval(() => {
                timeLeft--;
                countdownElement.textContent = timeLeft;

                if (timeLeft <= 0) {
                    clearInterval(timer);
                    resendButton.disabled = false;
                    resendButton.textContent = 'Resend code';
                }
            }, 1000);
        }

        // Resend verification code
        document.getElementById('resend-button').addEventListener('click', async function() {
            if (!this.disabled) {
                try {
                    const response = await fetch('/register/resend-code', {
                        method: 'POST'
                    });

                    const data = await response.json();
                    if (data.success) {
                        this.disabled = true;
                        startCountdown();
                    } else {
                        const errorMessage = document.getElementById('error-message');
                        errorMessage.textContent = data.error || 'Failed to resend code';
                        errorMessage.classList.add('visible');
                    }
                } catch (err) {
                    const errorMessage = document.getElementById('error-message');
                    errorMessage.textContent = 'Server error. Please try again later.';
                    errorMessage.classList.add('visible');
                }
            }
        });

        // Password visibility toggle
        document.getElementById('password-toggle').addEventListener('click', function() {
            const passwordInput = document.getElementById('password');
            const icon = this.querySelector('i');
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                passwordInput.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });
        
        document.getElementById('confirm-password-toggle').addEventListener('click', function() {
            const passwordInput = document.getElementById('confirm-password');
            const icon = this.querySelector('i');
            
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                passwordInput.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        });
        
        // Password strength meter
        document.getElementById('password').addEventListener('input', function() {
            const password = this.value;
            const meter = document.getElementById('password-strength-meter');
            
            // Remove all classes
            meter.className = 'password-strength-meter';
            
            if (password.length === 0) {
                meter.style.width = '0';
                return;
            }
            
            // Calculate password strength
            let strength = 0;
            
            // Length check
            if (password.length >= 8) strength += 1;
            if (password.length >= 12) strength += 1;
            
            // Character variety check
            if (/[A-Z]/.test(password)) strength += 1;
            if (/[a-z]/.test(password)) strength += 1;
            if (/[0-9]/.test(password)) strength += 1;
            if (/[^A-Za-z0-9]/.test(password)) strength += 1;
            
            // Update meter
            if (strength <= 2) {
                meter.classList.add('strength-weak');
            } else if (strength <= 4) {
                meter.classList.add('strength-fair');
            } else if (strength <= 5) {
                meter.classList.add('strength-good');
            } else {
                meter.classList.add('strength-strong');
            }
        });
        
        // Highlight form fields on focus
        const inputs = document.querySelectorAll('input');
        inputs.forEach(input => {
            input.addEventListener('focus', function() {
                this.parentElement.style.color = 'var(--color-accent-primary)';
            });
            
            input.addEventListener('blur', function() {
                this.parentElement.style.color = '';
            });
        });
    </script>
</body>
</html>